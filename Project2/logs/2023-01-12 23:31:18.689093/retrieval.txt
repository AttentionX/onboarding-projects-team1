Question 0 : hello?
Answer : 
Niki designed, implemented, tuned and evaluated countless model variants in our original codebase and tensor2tensor. Llion also experimented with novel model variants, was responsible for our initial codebase, and efficient inference and visualizations. Lukasz and Aidan spent countless long days designing various parts of and implementing tensor2tensor, replacing our earlier codebase, greatly improving results and massively accelerating our research. â€  Work performed while at Google Brain. â€¡ Work performed while at Google Research.  31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.transduction problems such as language modeling and machine translation [35, 2, 5]. 
7  Conclusion  In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention. For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles. We are excited about the future of attention-based models and plan to apply them to other tasks. 
We also trained it in a semi-supervised setting, using the larger high-confidence and BerkleyParser corpora from with approximately 17M sentences [37]. We used a vocabulary of 16K tokens for the WSJ only setting and a vocabulary of 32K tokens for the semi-supervised setting. We performed only a small number of experiments to select the dropout, both attention and residual (section 5.4), learning rates and beam size on the Section 22 development set, all other parameters remained unchanged from the English-to-German base translation model. During inference, we increased the maximum output length to input length + 300. 
â€¡ Work performed while at Google Research.  31st Conference on Neural Information Processing Systems (NIPS 2017), Long Beach, CA, USA.transduction problems such as language modeling and machine translation [35, 2, 5]. Numerous efforts have since continued to push the boundaries of recurrent language models and encoder-decoder architectures [38, 24, 15]. Recurrent models typically factor computation along the symbol positions of the input and output sequences. 
6  Results  6.1  Machine Translation  On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0 BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is listed in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models. 


Question 1 : do you know about RETRO model?
Answer : 
3  Model Architecture  Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35]. Here, the encoder maps an input sequence of symbol representations (x1 , ..., xn ) to a sequence of continuous representations z = (z1 , ..., zn ). Given z, the decoder then generates an output sequence (y1 , ..., ym ) of symbols one element at a time. At each step the model is auto-regressive [10], consuming the previously generated symbols as additional input when generating the next. 
7  Conclusion  In this work, we presented the Transformer, the first sequence transduction model based entirely on attention, replacing the recurrent layers most commonly used in encoder-decoder architectures with multi-headed self-attention. For translation tasks, the Transformer can be trained significantly faster than architectures based on recurrent or convolutional layers. On both WMT 2014 English-to-German and WMT 2014 English-to-French translation tasks, we achieve a new state of the art. In the former task our best model outperforms even all previously reported ensembles. We are excited about the future of attention-based models and plan to apply them to other tasks. 
To the best of our knowledge, however, the Transformer is the first transduction model relying entirely on self-attention to compute representations of its input and output without using sequencealigned RNNs or convolution. In the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [17, 18] and [9].  3  Model Architecture  Most competitive neural sequence transduction models have an encoder-decoder structure [5, 2, 35]. Here, the encoder maps an input sequence of symbol representations (x1 , ..., xn ) to a sequence of continuous representations z = (z1 , ..., zn ). 
6  Results  6.1  Machine Translation  On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0 BLEU, establishing a new state-of-the-art BLEU score of 28.4. The configuration of this model is listed in the bottom line of Table 3. Training took 3.5 days on 8 P100 GPUs. Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models. 
1  Introduction  Recurrent neural networks, long short-term memory [13] and gated recurrent [7] neural networks in particular, have been firmly established as state of the art approaches in sequence modeling and âˆ— Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first Transformer models and has been crucially involved in every aspect of this work. Noam proposed scaled dot-product attention, multi-head attention and the parameter-free position representation and became the other person involved in nearly every detail. 


Question 2 : So you cannot answer the questions about RETRO model?
Answer : 
This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical results to the base model. 6.3  English Constituency Parsing  To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. 
Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.  base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. 
In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical results to the base model. 6.3  English Constituency Parsing  To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural 9constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37]. 
(2014) [37] semi-supervised 92.1 Transformer (4 layers) semi-supervised 92.7 Luong et al. (2015) [23] multi-task 93.0 Dyer et al. (2016) [8] generative 93.3  In Table 3 rows (B), we observe that reducing the attention key size dk hurts model quality. This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial. We further observe in rows (C) and (D) that, as expected, bigger models are better, and dropout is very helpful in avoiding over-fitting. 
5  We used values of 2.8, 3.7, 6.0 and 9.5 TFLOPS for K80, K40, M40 and P100, respectively.  8Table 3: Variations on the Transformer architecture. Unlisted values are identical to those of the base model. All metrics are on the English-to-German translation development set, newstest2013. Listed perplexities are per-wordpiece, according to our byte-pair encoding, and should not be compared to per-word perplexities.  


Question 3 : OK, good. Then explain about the position encoding
Answer : 
3.5  Positional Encoding  Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the 5Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention. 
To this end, we add "positional encodings" to the input embeddings at the bottoms of the encoder and decoder stacks. The positional encodings have the same dimension dmodel as the embeddings, so that the two can be summed. There are many choices of positional encodings, learned and fixed [9]. In this work, we use sine and cosine functions of different frequencies: P E(pos,2i) = sin(pos/100002i/dmodel ) P E(pos,2i+1) = cos(pos/100002i/dmodel ) where pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. 
In this work, we use sine and cosine functions of different frequencies: P E(pos,2i) = sin(pos/100002i/dmodel ) P E(pos,2i+1) = cos(pos/100002i/dmodel ) where pos is the position and i is the dimension. That is, each dimension of the positional encoding corresponds to a sinusoid. The wavelengths form a geometric progression from 2Ï€ to 10000 Â· 2Ï€. We chose this function because we hypothesized it would allow the model to easily learn to attend by relative positions, since for any fixed offset k, P Epos+k can be represented as a linear function of P Epos . 
3.5  Positional Encoding  Since our model contains no recurrence and no convolution, in order for the model to make use of the order of the sequence, we must inject some information about the relative or absolute position of the 5Table 1: Maximum path lengths, per-layer complexity and minimum number of sequential operations for different layer types. n is the sequence length, d is the representation dimension, k is the kernel size of convolutions and r the size of the neighborhood in restricted self-attention. Layer Type  Complexity per Layer  Self-Attention Recurrent Convolutional Self-Attention (restricted)  O(n2 Â· d) O(n Â· d2 ) O(k Â· n Â· d2 ) O(r Â· n Â· d)  Sequential Operations O(1) O(n) O(1) O(1)  Maximum Path Length O(1) O(n) O(logk (n)) O(n/r)  tokens in the sequence. 
This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [38, 2, 9]. â€¢ The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder. 


Question 4 : Does transformer use relative position embedding?
Answer : 
The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively. 2Figure 1: The Transformer - model architecture.  3.1  Encoder and Decoder Stacks  Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of the two sub-layers, followed by layer normalization [1]. 
Given z, the decoder then generates an output sequence (y1 , ..., ym ) of symbols one element at a time. At each step the model is auto-regressive [10], consuming the previously generated symbols as additional input when generating the next. The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively. 2Figure 1: The Transformer - model architecture.  3.1  Encoder and Decoder Stacks  Encoder: The encoder is composed of a stack of N = 6 identical layers. 
In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2. 
3.2.3  Applications of Attention in our Model  The Transformer uses multi-head attention in three different ways: â€¢ In "encoder-decoder attention" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [38, 2, 9]. â€¢ The encoder contains self-attention layers. 
In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical results to the base model. 6.3  English Constituency Parsing  To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural 9constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37]. 


Question 5 : So transformer's position embedding is absolute, right?
Answer : 
The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively. 2Figure 1: The Transformer - model architecture.  3.1  Encoder and Decoder Stacks  Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, positionwise fully connected feed-forward network. We employ a residual connection [11] around each of the two sub-layers, followed by layer normalization [1]. 
Given z, the decoder then generates an output sequence (y1 , ..., ym ) of symbols one element at a time. At each step the model is auto-regressive [10], consuming the previously generated symbols as additional input when generating the next. The Transformer follows this overall architecture using stacked self-attention and point-wise, fully connected layers for both the encoder and decoder, shown in the left and right halves of Figure 1, respectively. 2Figure 1: The Transformer - model architecture.  3.1  Encoder and Decoder Stacks  Encoder: The encoder is composed of a stack of N = 6 identical layers. 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. (2006) [29] WSJ only, discriminative 90.4 Zhu et al. (2013) [40] WSJ only, discriminative 90.4 Dyer et al. (2016) [8] WSJ only, discriminative 91.7 Transformer (4 layers) WSJ only, discriminative 91.3 Zhu et al. 
In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical results to the base model. 6.3  English Constituency Parsing  To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural 9constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37]. 
In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions, linearly for ConvS2S and logarithmically for ByteNet. This makes it more difficult to learn dependencies between distant positions [12]. In the Transformer this is reduced to a constant number of operations, albeit at the cost of reduced effective resolution due to averaging attention-weighted positions, an effect we counteract with Multi-Head Attention as described in section 3.2. 


Question 6 : please answer in 'yes' or 'no'. is transformer's position encoding absolute?
Answer : 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. (2006) [29] WSJ only, discriminative 90.4 Zhu et al. 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. (2006) [29] WSJ only, discriminative 90.4 Zhu et al. (2013) [40] WSJ only, discriminative 90.4 Dyer et al. (2016) [8] WSJ only, discriminative 91.7 Transformer (4 layers) WSJ only, discriminative 91.3 Zhu et al. 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. (2006) [29] WSJ only, discriminative 90.4 Zhu et al. (2013) [40] WSJ only, discriminative 90.4 Dyer et al. 
In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [9], and observe nearly identical results to the base model. 6.3  English Constituency Parsing  To evaluate if the Transformer can generalize to other tasks we performed experiments on English constituency parsing. This task presents specific challenges: the output is subject to strong structural 9constraints and is significantly longer than the input. Furthermore, RNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37]. 


Question 7 : Ok, thanks.
Answer : 
Model ByteNet [18] Deep-Att + PosUnk [39] GNMT + RL [38] ConvS2S [9] MoE [32] Deep-Att + PosUnk Ensemble [39] GNMT + RL Ensemble [38] ConvS2S Ensemble [9] Transformer (base model) Transformer (big)  BLEU EN-DE 23.75 24.6 25.16 26.03 26.30 26.36 27.3 28.4  EN-FR 39.2 39.92 40.46 40.56 40.4 41.16 41.29 38.1 41.8  Training Cost (FLOPs) EN-DE  EN-FR  1.0 Â· 1020 1.4 Â· 1020 1.5 Â· 1020 1.2 Â· 1020 8.0 Â· 1020 20 1.8 Â· 10 1.1 Â· 1021 19 7.7 Â· 10 1.2 Â· 1021 3.3 Â· 1018 2.3 Â· 1019 2.3 Â· 1019 9.6 Â· 1018 2.0 Â· 1019  Label Smoothing During training, we employed label smoothing of value ls = 0.1 [36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.  
3.2  Attention  An attention function can be described as mapping a query and a set of key-value pairs to an output, where the query, keys, values, and output are all vectors. The output is computed as a weighted sum of the values, where the weight assigned to each value is computed by a compatibility function of the query with the corresponding key. 3Scaled Dot-Product Attention  Multi-Head Attention  Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel. 3.2.1  Scaled Dot-Product Attention  We call our particular attention "Scaled Dot-Product Attention" (Figure 2). 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. (2006) [29] WSJ only, discriminative 90.4 Zhu et al. (2013) [40] WSJ only, discriminative 90.4 Dyer et al. (2016) [8] WSJ only, discriminative 91.7 Transformer (4 layers) WSJ only, discriminative 91.3 Zhu et al. 
Model ByteNet [18] Deep-Att + PosUnk [39] GNMT + RL [38] ConvS2S [9] MoE [32] Deep-Att + PosUnk Ensemble [39] GNMT + RL Ensemble [38] ConvS2S Ensemble [9] Transformer (base model) Transformer (big)  BLEU EN-DE 23.75 24.6 25.16 26.03 26.30 26.36 27.3 28.4  EN-FR 39.2 39.92 40.46 40.56 40.4 41.16 41.29 38.1 41.8  Training Cost (FLOPs) EN-DE  EN-FR  1.0 Â· 1020 1.4 Â· 1020 1.5 Â· 1020 1.2 Â· 1020 8.0 Â· 1020 20 1.8 Â· 10 1.1 Â· 1021 19 7.7 Â· 10 1.2 Â· 1021 3.3 Â· 1018 2.3 Â· 1019 2.3 Â· 1019 9.6 Â· 1018 2.0 Â· 1019  Label Smoothing During training, we employed label smoothing of value ls = 0.1 [36]. This hurts perplexity, as the model learns to be more unsure, but improves accuracy and BLEU score.  6  Results  6.1  Machine Translation  On the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2) outperforms the best previously reported models (including ensembles) by more than 2.0 BLEU, establishing a new state-of-the-art BLEU score of 28.4. 
base  N  dmodel  dff  h  dk  dv  Pdrop  ls  6  512  2048  8 1 4 16 32  64 512 128 32 16 16 32  64 512 128 32 16  0.1  0.1  32 128  32 128  (A)  (B)  train steps 100K  2 4 8 (C)  256 1024 1024 4096  0.0 0.2  (D) (E) big  6  0.0 0.2 positional embedding instead of sinusoids 1024 4096 16 0.3  300K  PPL (dev) 4.92 5.29 5.00 4.91 5.01 5.16 5.01 6.11 5.19 4.88 5.75 4.66 5.12 4.75 5.77 4.95 4.67 5.47 4.92 4.33  BLEU (dev) 25.8 24.9 25.5 25.8 25.4 25.1 25.4 23.7 25.3 25.5 24.5 26.0 25.4 26.2 24.6 25.5 25.3 25.7 25.7 26.4  params Ã—106 65  58 60 36 50 80 28 168 53 90  213  Table 4: The Transformer generalizes well to English constituency parsing (Results are on Section 23 of WSJ) Parser Training WSJ 23 F1 Vinyals & Kaiser el al. (2014) [37] WSJ only, discriminative 88.3 Petrov et al. 


